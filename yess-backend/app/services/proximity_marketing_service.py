from typing import List, Optional, Dict, Any
from sqlalchemy.orm import Session
from sqlalchemy import func
from datetime import datetime, timedelta

from app.core.notifications import SMSService, PushNotificationService
from app.models.user import User
from app.models.partner import Partner, PartnerLocation
from app.models.transaction import Transaction
from app.models.wallet import Wallet
from app.services.recommendation_service import RecommendationService
from app.services.geolocation_service import GeolocationService

class ProximityMarketingService:
    def __init__(
        self, 
        sms_service: SMSService, 
        push_service: PushNotificationService,
        recommendation_service: RecommendationService
    ):
        self._sms_service = sms_service
        self._push_service = push_service
        self._recommendation_service = recommendation_service

    async def check_nearby_partners(
        self, 
        user: User, 
        current_location: Dict[str, float], 
        db: Session,
        radius: float = 0.5  # 500 –º–µ—Ç—Ä–æ–≤
    ):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        nearby_locations = db.query(PartnerLocation).filter(
            func.ST_DWithin(
                PartnerLocation.geom, 
                func.ST_MakePoint(current_location['longitude'], current_location['latitude']),
                radius * 1000  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –º–µ—Ç—Ä—ã
            )
        ).all()

        if not nearby_locations:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recent_transactions = db.query(Transaction).filter(
            Transaction.user_id == user.id,
            Transaction.created_at >= datetime.utcnow() - timedelta(days=30)
        ).all()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        wallet = db.query(Wallet).filter(Wallet.user_id == user.id).first()

        for location in nearby_locations:
            partner = location.partner
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            personalized_offer = self._get_personalized_offer(
                user, partner, recent_transactions, wallet
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self._send_proximity_notification(
                user, partner, location, personalized_offer, db
            )

    def _get_personalized_offer(
        self, 
        user: User, 
        partner: Partner, 
        recent_transactions: List[Transaction],
        wallet: Wallet
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        """
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        partner_transactions = [
            t for t in recent_transactions if t.partner_id == partner.id
        ]

        # –†–∞—Å—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–µ—à–±—ç–∫–∞
        dynamic_cashback = self._recommendation_service._calculate_dynamic_cashback(
            user, partner
        )

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not partner_transactions:
            # –ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            offer_type = "first_visit"
            message = f"–í–ø–µ—Ä–≤—ã–µ —É {partner.name}? –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ {dynamic_cashback}%!"
        elif len(partner_transactions) < 3:
            # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            offer_type = "loyalty"
            message = f"–í–∞—à –∫–µ—à–±—ç–∫ —É {partner.name} –≤—ã—Ä–æ—Å –¥–æ {dynamic_cashback}%!"
        else:
            # –ß–∞—Å—Ç—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å
            offer_type = "frequent_visitor"
            message = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {wallet.yescoin_balance} YesCoin. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ {partner.name}!"

        return {
            "type": offer_type,
            "message": message,
            "cashback_rate": dynamic_cashback,
            "partner_name": partner.name
        }

    async def _send_proximity_notification(
        self, 
        user: User, 
        partner: Partner, 
        location: PartnerLocation,
        offer: Dict[str, Any],
        db: Session
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ proximity-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        # SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if user.sms_enabled and user.phone:
            await self._sms_service.send_sms(
                user.phone, 
                f"üéÅ {offer['message']} –ñ–¥–µ–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: {location.address}"
            )

        # Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if user.push_enabled and user.device_tokens:
            await self._push_service.send_push(
                device_tokens=user.device_tokens,
                title=f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {partner.name}",
                body=offer['message'],
                data={
                    "type": "proximity_offer",
                    "partner_id": str(partner.id),
                    "partner_name": partner.name,
                    "offer_type": offer['type'],
                    "cashback_rate": str(offer['cashback_rate'])
                }
            )

        # In-App —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        from app.models.notification import Notification
        notification = Notification(
            user_id=user.id,
            type="proximity_offer",
            title=f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {partner.name}",
            body=offer['message'],
            data={
                "partner_id": partner.id,
                "location_id": location.id,
                "offer_type": offer['type'],
                "cashback_rate": offer['cashback_rate']
            },
            is_read=False
        )
        db.add(notification)
        db.commit()

# Singleton
proximity_marketing_service = ProximityMarketingService(
    sms_service=sms_service,
    push_service=push_service,
    recommendation_service=recommendation_service
)
