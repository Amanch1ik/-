"""
Main FastAPI application
"""
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.staticfiles import StaticFiles
from loguru import logger
import time
import asyncio
import os

from app.core.config import settings
from app.core.database import engine, Base
from app.api.v1 import (
    auth, wallet, partner, order, 
    agent, city, qr, maps, upload, payments,
    notifications, achievements, reviews, promotions, analytics, banks, localization
)
from app.api.admin import admin_router, partner_admin_router
from app.services.performance_monitor import performance_monitor
from app.services.alert_manager import alert_manager
from app.services.auto_scaler import auto_scaler
from app.services.database_optimizer import db_optimizer

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="YESS Loyalty API",
    description="Backend API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ YESS",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Middleware –¥–ª—è CORS —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_cors_origins(),
    allow_credentials=settings.CORS_ALLOW_CREDENTIALS,
    allow_methods=settings.CORS_ALLOW_METHODS,
    allow_headers=settings.CORS_ALLOW_HEADERS
)

# Middleware –¥–ª—è —Å–∂–∞—Ç–∏—è –æ—Ç–≤–µ—Ç–æ–≤
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@app.middleware("http")
async def performance_middleware(request: Request, call_next):
    start_time = time.time()
    
    performance_monitor.track_request(
        method=request.method,
        endpoint=request.url.path
    )
    
    response = await call_next(request)
    
    duration = time.time() - start_time
    performance_monitor.track_duration(duration)
    
    if duration > 2.0:
        alert_manager.add_alert(
            level=alert_manager.AlertLevel.WARNING,
            message=f"–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {duration:.2f}—Å –¥–ª—è {request.url.path}",
            metadata={"endpoint": request.url.path, "duration": duration}
        )
    
    return response

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/v1/auth", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
app.include_router(wallet.router, prefix="/api/v1/wallet", tags=["–ö–æ—à–µ–ª–µ–∫"])
app.include_router(payments.router, prefix="/api/v1/payments", tags=["–ü–ª–∞—Ç–µ–∂–∏"])
app.include_router(partner.router, prefix="/api/v1/partner", tags=["–ü–∞—Ä—Ç–Ω–µ—Ä—ã"])
app.include_router(order.router, prefix="/api/v1/order", tags=["–ó–∞–∫–∞–∑—ã"])
app.include_router(agent.router, prefix="/api/v1/agent", tags=["–ê–≥–µ–Ω—Ç—ã"])
app.include_router(city.router, prefix="/api/v1/city", tags=["–ì–æ—Ä–æ–¥–∞"])
app.include_router(qr.router, prefix="/api/v1", tags=["QR-–∫–æ–¥—ã"])
app.include_router(maps.router, prefix="/api/v1", tags=["–ö–∞—Ä—Ç—ã –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è"])
app.include_router(upload.router, prefix="/api/v1", tags=["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"])

# –ù–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(notifications.router, prefix="/api/v1/notifications", tags=["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
app.include_router(achievements.router, prefix="/api/v1/achievements", tags=["–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"])
app.include_router(reviews.router, prefix="/api/v1/reviews", tags=["–û—Ç–∑—ã–≤—ã"])
app.include_router(promotions.router, prefix="/api/v1/promotions", tags=["–ê–∫—Ü–∏–∏"])
app.include_router(analytics.router, prefix="/api/v1/analytics", tags=["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
app.include_router(banks.router, prefix="/api/v1/banks", tags=["–ë–∞–Ω–∫–∏ –ö–†"])
app.include_router(localization.router, prefix="/api/v1/localization", tags=["–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è"])

# –†–æ—É—Ç–µ—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.include_router(admin_router, prefix="/api", tags=["–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
app.include_router(partner_admin_router, prefix="/api", tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"])

# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
if os.path.exists("uploads"):
    app.mount("/static", StaticFiles(directory="uploads"), name="static")

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ YESS Loyalty API...")
    logger.info(f"üìç –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {settings.HOST}:{settings.PORT}")
    logger.info(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ http://{settings.HOST}:{settings.PORT}/docs")
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    asyncio.create_task(performance_monitor.start_monitoring())
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.create_task(auto_scaler.start_monitoring())
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î
    db_optimizer.create_indexes()
    
    logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã YESS Loyalty API...")

@app.get("/")
async def root():
    return {
        "message": "YESS Loyalty API",
        "version": "1.0.0",
        "docs": "/docs",
        "status": "—Ä–∞–±–æ—Ç–∞–µ—Ç"
    }

@app.get("/health")
async def health_check():
    return {
        "status": "–∑–¥–æ—Ä–æ–≤",
        "timestamp": time.time(),
        "version": "1.0.0"
    }

@app.get("/metrics")
async def get_metrics():
    return performance_monitor.get_metrics()

@app.get("/alerts")
async def get_alerts():
    return {
        "alerts": [
            {
                "level": alert.level.value,
                "message": alert.message,
                "timestamp": alert.timestamp,
                "metadata": alert.metadata
            }
            for alert in alert_manager.alerts[-10:]
        ]
    }

@app.get("/scaling")
async def get_scaling_info():
    return {
        "—Ç–µ–∫—É—â–∏–µ_–∏–Ω—Å—Ç–∞–Ω—Å—ã": auto_scaler.current_instances,
        "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è_–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è": auto_scaler.scaling_config,
        "–∏—Å—Ç–æ—Ä–∏—è_–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è": auto_scaler.scaling_history[-5:]
    }

@app.get("/database/stats")
async def get_database_stats():
    return db_optimizer.get_database_stats()

